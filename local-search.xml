<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nginx通过路由配置多个blazor项目</title>
    <link href="/2024/06/27/nginx%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAblazor/"/>
    <url>/2024/06/27/nginx%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAblazor/</url>
    
    <content type="html"><![CDATA[<blockquote><p>多数情况下，单个域名挂载多个项目，这是正常的项目部署方案，<br>但随着业务的复杂度增大，会把项目进行拆分，通过路由进行业务区分，<br>此时就需要多个项目共享一个域名。</p></blockquote><p>此篇文章则介绍 多个blazor server项目如何配置</p><hr><p>假设你的前缀为 app1，此处只配置一个程序，其他程序同理</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80;<br>    server_name youdomain.com;<br>    proxy_http_version 1.1;<br>    proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>    proxy_set_header Connection <span class="hljs-string">&#x27;upgrade&#x27;</span>;<br>    proxy_set_header Host <span class="hljs-variable">$host</span>;<br>    proxy_cache_bypass <span class="hljs-variable">$http_upgrade</span>;<br><br>    location /app1/ &#123;<br>        proxy_pass http://127.0.0.1:6011;<br>        <span class="hljs-comment"># 将所有应用程序路径添加到代理路径前缀中</span><br>        rewrite ^/app1/(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br>    &#125;<br><br>    location /app2/ &#123;<br>        proxy_pass http://127.0.0.1:6012;<br>        <span class="hljs-comment"># 将所有应用程序路径添加到代理路径前缀中</span><br>        rewrite ^/app2/(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="blazor-server-项目配置"><a href="#blazor-server-项目配置" class="headerlink" title="blazor server 项目配置"></a>blazor server 项目配置</h2><h3 id="Host-cshtml文件修改"><a href="#Host-cshtml文件修改" class="headerlink" title="_Host.cshtml文件修改"></a>_Host.cshtml文件修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-keyword">if</span> (_env.IsProduction())<br>&#123;<br>    &lt;base href=<span class="hljs-string">&quot;~/app1/&quot;</span> /&gt;<br>    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;icon&quot;</span> href=<span class="hljs-string">&quot;favicon.ico&quot;</span> /&gt;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    &lt;base href=<span class="hljs-string">&quot;~/&quot;</span> /&gt;<br>    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;icon&quot;</span> href=<span class="hljs-string">&quot;/favicon.ico&quot;</span> /&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于本地环境不需要加前缀,故作此判断，其他路径不需要改变</p><h3 id="Program-cs-文件修改"><a href="#Program-cs-文件修改" class="headerlink" title="Program.cs 文件修改"></a>Program.cs 文件修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">app.UseEndpoints(endpoints =&gt;<br>&#123;<br>    endpoints.MapControllers();<br>    endpoints.MapBlazorHub();<br><br>    <span class="hljs-keyword">if</span> (app.Environment.IsProduction())<br>    &#123;<br>        endpoints.MapFallbackToPage(<span class="hljs-string">&quot;/app1/&#123;*path:nonfile&#125;&quot;</span>, <span class="hljs-string">&quot;/_Host&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        app.MapFallbackToPage(<span class="hljs-string">&quot;/_Host&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>正常情况下，到此就配置完成了，但我的项目里用到了控制器，故需将所有请求的路由加上前缀，控制器路由无需添加</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>blazor</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blazor server</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code下载慢</title>
    <link href="/2024/06/23/vscode%E4%B8%8B%E8%BD%BD%E6%85%A2/"/>
    <url>/2024/06/23/vscode%E4%B8%8B%E8%BD%BD%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><a href="https://code.visualstudio.com/">vscode 下载地址</a><br>点击下载后非常慢</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>复制下载链接<code>https://az764295.vo.msecnd.net/stable/6c3e3dba23e8fadc360aed75ce363ba185c49794/VSCodeUserSetup-x64-1.81.1.exe</code></p><p>将地址中<code>az764295.vo.msecnd.net</code><br>改为国内镜像地址<code>vscode.cdn.azure.cn</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>vs code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用BaGet搭建本地NuGet服务器</title>
    <link href="/2024/06/23/%E4%BD%BF%E7%94%A8BaGet%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0NuGet%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/06/23/%E4%BD%BF%E7%94%A8BaGet%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0NuGet%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-搭建"><a href="#Docker-搭建" class="headerlink" title="Docker 搭建"></a>Docker 搭建</h2><h3 id="在合适路径下新建-baget-env-文件"><a href="#在合适路径下新建-baget-env-文件" class="headerlink" title="在合适路径下新建 baget.env 文件"></a>在合适路径下新建 baget.env 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The following config is the API Key used to publish packages.</span><br><span class="hljs-comment"># You should change this to a secret value to secure your server.</span><br>ApiKey=NUGET-SERVER-API-KEY<br><br>Storage__Type=FileSystem<br>Storage__Path=F://file/nuget/baget/packages  //绝对路径<br>Database__Type=Sqlite<br>Database__ConnectionString=Data Source=/var/baget/baget.db<br>Search__Type=Database<br></code></pre></td></tr></table></figure><h3 id="docker-安装镜像"><a href="#docker-安装镜像" class="headerlink" title="docker 安装镜像"></a>docker 安装镜像</h3><p>拉取镜像</p><p><code>docker pull loicsharma/baget</code></p><p>在 <code>baget.env</code> 文件根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name vinno.nuget -p 9999:80 --env-file baget.env -v <span class="hljs-string">&quot;F://file/nuget/baget-data:/var/baget&quot;</span> loicsharma/baget:latest<br></code></pre></td></tr></table></figure><p>到此运行 localhost:9999 即可</p><h3 id="推送Nuget包"><a href="#推送Nuget包" class="headerlink" title="推送Nuget包"></a>推送Nuget包</h3><p>项目右键属性，在打包这个 tab 页上勾选 “在构建时生成 NuGet 包”，这样在我们每次生成项目完成的时候会在bin目录下生成对应的 nuget 包<br>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dotnet nuget push -s http://localhost:9999/v3/index.json Vinno.Common.1.0.0.1.nupkg -k vinno.nuget<br></code></pre></td></tr></table></figure><p>其中 -k vinno.nuget 为密钥</p>]]></content>
    
    
    <categories>
      
      <category>NuGet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BaGet</tag>
      
      <tag>NuGet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站推荐</title>
    <link href="/2024/06/23/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <url>/2024/06/23/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h2><ul><li><a href="https://refactoringguru.cn/">设计模式</a></li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul><li><a href="https://tinypng.com/">在线压缩图片</a></li></ul><h2 id="免费API"><a href="#免费API" class="headerlink" title="免费API"></a>免费API</h2><ul><li><a href="https://www.dmoe.cc/">随机二次元图片</a></li><li><a href="https://api.uomg.com/">UomgAPI</a></li><li><a href="https://www.ipify.org/">免费获取本机IP</a></li><li><a href="https://api.julym.com/">Macro’s API</a></li><li><a href="https://api.vvhan.com/">韩小韩WebAPI接口</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站推荐</tag>
      
      <tag>推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fooocus-Api</title>
    <link href="/2023/12/27/Fooocus-Api/"/>
    <url>/2023/12/27/Fooocus-Api/</url>
    
    <content type="html"><![CDATA[<h2 id="Fooocus-Api-本地搭建"><a href="#Fooocus-Api-本地搭建" class="headerlink" title="Fooocus-Api 本地搭建"></a>Fooocus-Api 本地搭建</h2><ul><li><p>安装<a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=11&target_type=exe_local">CUDA Toolkit</a><br>根据自己的系统版本选择下载  </p><ul><li>验证是否安装成功<br>命令行输入</li></ul><p><code>nvcc --version</code><br>安装成功的话会显示<code>CUDA Toolkit</code>版本</p></li><li><p>安装<a href="https://pytorch.org/get-started/locally/">Pytorch</a><br>根据自己的环境选择安装，然后赋值脚本命令进行下载即可，需要注意的是<code>Pytorch</code>与<code>CUDA Toolkit</code>版本需要对应   </p><ul><li>验证是否安装成功<br> 命令行输入<pre><code class="bash">import torchtorch.cuda.is_available()</code></pre> 如果返回True则代表可用</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Foocus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker部署Wasm</title>
    <link href="/2023/11/27/Docker%E9%83%A8%E7%BD%B2Wasm/"/>
    <url>/2023/11/27/Docker%E9%83%A8%E7%BD%B2Wasm/</url>
    
    <content type="html"><![CDATA[<p>Blazor Webassembly作为独立项目发布时为静态文件发布<br>故采用nginx代理静态文件方式部署</p><ol><li><p>添加 Dockerfile 配置<br>在发布根目录添加Dockerfile文件，并添加如下配置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用官方的 Nginx 镜像作为基础镜像</span><br><span class="hljs-keyword">FROM</span> nginx:latest<br><br><span class="hljs-comment"># 删除 Nginx 默认的静态文件目录中的内容</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf /usr/share/nginx/html/*</span><br><br><span class="hljs-comment"># 将本地的静态文件复制到 Nginx 的默认静态文件目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./wwwroot /usr/share/nginx/html</span><br><br><span class="hljs-comment"># 设置 Nginx 配置以使用新的静态文件目录 可选</span><br><span class="hljs-comment"># COPY nginx.conf /etc/nginx/nginx.conf</span><br><br><span class="hljs-comment"># 暴露 Nginx 默认端口 80（如果有需要，可以映射到宿主机的其他端口）</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># 启动 Nginx 服务</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">docker build -t &lt;your-<span class="hljs-built_in">image</span>-<span class="hljs-built_in">name</span>&gt; .<br></code></pre></td></tr></table></figure></li><li><p>构建容器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker run -d -p &lt;port&gt;:<span class="hljs-number">80</span> &lt;you-image-name&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Blazor</tag>
      
      <tag>Net Core</tag>
      
      <tag>Blazor WebAssembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo怎么避免README文件以及CNAME文件的覆盖</title>
    <link href="/2023/11/24/Hexo%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8DREADME%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8ACNAME%E6%96%87%E4%BB%B6%E7%9A%84%E8%A6%86%E7%9B%96/"/>
    <url>/2023/11/24/Hexo%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8DREADME%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8ACNAME%E6%96%87%E4%BB%B6%E7%9A%84%E8%A6%86%E7%9B%96/</url>
    
    <content type="html"><![CDATA[<h2 id="避免README-md文件的覆盖"><a href="#避免README-md文件的覆盖" class="headerlink" title="避免README.md文件的覆盖"></a>避免README.md文件的覆盖</h2><p>因为Github的版本库一般都会附上README.md的说明，但是Hexo默认会把所有的md文件解析成html文件，所以即使编写了README.md文件，也会在下一次部署博客时被删去。</p><p>解决方法：</p><p>在博客文件夹的根目录下的配置文件_config.yml中配置一下skip_render选项，如下所以：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">skip_render:</span> README.md<br></code></pre></td></tr></table></figure><p>这样就可以确保README.md文件不被渲染了。</p><h2 id="避免CNAME文件被删除的四种方法"><a href="#避免CNAME文件被删除的四种方法" class="headerlink" title="避免CNAME文件被删除的四种方法"></a>避免CNAME文件被删除的四种方法</h2><p>每次 <code>hexo d</code> 之后，都重新去Github仓库目录下新建CNAME文件</p><p>在 <code>hexo g</code> 之后， <code>hexo d</code> 之前，把CNAME文件复制到 “\public\” 目录下面，里面写入你要绑定的域名。</p><p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在hexo d之后就不会被删除了。</p><p>通过安装插件实现永久保留</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-cname <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>之后在_config.yml中添加</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">Plugins</span>:<br><span class="hljs-literal">-</span> hexo-generator-cname<br></code></pre></td></tr></table></figure><p>需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Fluid 自定义域名搭建博客</title>
    <link href="/2023/11/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><ul><li><a href="https://nodejs.org/en">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="https://git-scm.com/">Git</a></li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <a href="https://hexo.io/zh-cn/index.html">Hexo</a></h3><p>使用npm安装Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs .">├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数</p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>或者简写</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span> --watch<br></code></pre></td></tr></table></figure><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span> --deploy<br>$ hexo deploy --<span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>或者简写</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g -d<br><span class="hljs-variable">$ </span>hexo d -g<br></code></pre></td></tr></table></figure><h2 id="Fluid-主题"><a href="#Fluid-主题" class="headerlink" title="Fluid 主题"></a><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.fluid.yml</a>，将主题的 _config.yml 内容复制进去。</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。</p><h4 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h4><p>如下修改 Hexo 博客目录中的 <em><strong>_config.yml</strong></em>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <em><strong>&#x2F;source&#x2F;about&#x2F;index.md</strong></em>，添加 <em><strong>layout</strong></em> 属性。<br>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h2 id="开启评论功能-Valine"><a href="#开启评论功能-Valine" class="headerlink" title="开启评论功能 Valine"></a>开启评论功能 <a href="https://valine.js.org/">Valine</a></h2><h3 id="获取APP-ID-和-APP-Key"><a href="#获取APP-ID-和-APP-Key" class="headerlink" title="获取APP ID 和 APP Key"></a>获取APP ID 和 APP Key</h3><p>请先<a href="https://console.leancloud.cn/login">登录</a>或<a href="https://console.leancloud.cn/register">注册</a> LeanCloud, 进入控制台后点击左下角创建应用：<br><img src="https://i.loli.net/2019/06/21/5d0c995c86fac81746.jpg"><br>应用创建好以后，进入刚刚创建的应用，选择左下角的 <strong>设置</strong> &gt; <strong>应用Key</strong>，然后就能看到你的 <strong>APP ID</strong> 和 <strong>APP Key</strong> 了：<br><img src="https://i.loli.net/2019/06/21/5d0c997a60baa24436.jpg"></p><h4 id="在主题配置文件中全局搜索-comments-调整与下面一致："><a href="#在主题配置文件中全局搜索-comments-调整与下面一致：" class="headerlink" title="在主题配置文件中全局搜索 comments,调整与下面一致："></a>在主题配置文件中全局搜索 <em><strong>comments</strong></em>,调整与下面一致：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></td></tr></table></figure><h4 id="往下找到-gitalk-配置"><a href="#往下找到-gitalk-配置" class="headerlink" title="往下找到 gitalk 配置"></a>往下找到 <em><strong>gitalk</strong></em> 配置</h4><p>将参数按需填写即可</p><h2 id="推送到-Github"><a href="#推送到-Github" class="headerlink" title="推送到 Github"></a>推送到 Github</h2><h3 id="在自己的GitHub创建仓库"><a href="#在自己的GitHub创建仓库" class="headerlink" title="在自己的GitHub创建仓库"></a>在自己的GitHub创建仓库</h3><h3 id="在配置文件中搜索-deploy"><a href="#在配置文件中搜索-deploy" class="headerlink" title="在配置文件中搜索 deploy"></a>在配置文件中搜索 <em><strong>deploy</strong></em></h3><p>配置如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> 你的仓库地址<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><p>结束后，进到自己的Github仓库看下代码有没有推送成功。</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><h3 id="需要自己有域名，没有的可到阿里云或腾讯云购买"><a href="#需要自己有域名，没有的可到阿里云或腾讯云购买" class="headerlink" title="需要自己有域名，没有的可到阿里云或腾讯云购买"></a>需要自己有域名，没有的可到阿里云或腾讯云购买</h3><h3 id="在-Settings-Pages-中找到-Custom-domain-配置好自己的域名就可以了。"><a href="#在-Settings-Pages-中找到-Custom-domain-配置好自己的域名就可以了。" class="headerlink" title="在 Settings &gt; Pages 中找到 Custom domain 配置好自己的域名就可以了。"></a>在 <em><strong>Settings</strong></em> &gt; <em><strong>Pages</strong></em> 中找到 <em><strong>Custom domain</strong></em> 配置好自己的域名就可以了。</h3><p>到此，搭建就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
